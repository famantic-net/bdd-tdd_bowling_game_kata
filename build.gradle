import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-autoconfigure:3.0.4',
            'io.cucumber:cucumber-spring:7.11.1',
    )
    testImplementation (
            'org.junit.platform:junit-platform-suite-api:1.9.2',
            'org.springframework.boot:spring-boot-starter-test:3.0.4',
            'io.cucumber:cucumber-junit:7.11.1',
            'io.cucumber:cucumber-java:7.11.1',
            'io.cucumber:cucumber-junit-platform-engine:7.11.1',
    )
}

//group = 'bowling'
description = 'BDD%TDD-Bowling-Game-Kata'
//java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

tasks.register("bddTest") {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the Cucumber tests.'
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty',
                    '--plugin', 'json:build/reports/bddTest.json',
                    '--plugin', 'message:build/reports/bddTest.ndjson',
                    '--publish',
                    '--glue', 'bowling', 'src/test/resources',
            ]
        }
    }
}
